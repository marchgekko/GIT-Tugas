{
  "stats": {
    "suites": 5,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-30T09:47:10.847Z",
    "end": "2025-07-30T09:47:11.987Z",
    "duration": 1140,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f6c49886-ceb0-4e03-a7a0-d334565dd78c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9c48e51f-bbe7-4888-8f3c-9f12cf8512d8",
          "title": "Delete Reqres API",
          "fullFile": "C:\\Users\\LENOVO\\Documents\\QA Engineer\\Sesi6_Andrean Martasyah\\API-Automation\\tests\\deleteUser.js",
          "file": "\\tests\\deleteUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should delete user successfully",
              "fullTitle": "Delete Reqres API Should delete user successfully",
              "timedOut": false,
              "duration": 574,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await fetch(\"https://reqres.in/api/users/2\", {\n  method: \"DELETE\",\n  headers: {\n    \"x-api-key\": \"reqres-free-v1\",\n    \"Accept\": \"application/json\",\n  },\n});\nexpect(response.status).to.equal(204); // No Content",
              "err": {},
              "uuid": "297226ff-885d-4760-98e5-ce0ba290201f",
              "parentUUID": "9c48e51f-bbe7-4888-8f3c-9f12cf8512d8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "297226ff-885d-4760-98e5-ce0ba290201f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 574,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9dd9ef43-9bb7-43c5-8b36-e948f1b26072",
          "title": "GET User API Test",
          "fullFile": "C:\\Users\\LENOVO\\Documents\\QA Engineer\\Sesi6_Andrean Martasyah\\API-Automation\\tests\\getUser.js",
          "file": "\\tests\\getUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get User with ID 2 should be successful",
              "fullTitle": "GET User API Test Get User with ID 2 should be successful",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await fetch(\"https://reqres.in/api/users/2\");\nconst data = await response.json();\nassert.strictEqual(response.status, 200);\nassert.strictEqual(data.data.first_name, \"Janet\");\nexpect(response.status).to.equal(200);\nexpect(data.data.first_name).to.include(\"Janet\");",
              "err": {},
              "uuid": "d56ca894-3cc2-479e-aaaa-49ea415bd1b8",
              "parentUUID": "9dd9ef43-9bb7-43c5-8b36-e948f1b26072",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d56ca894-3cc2-479e-aaaa-49ea415bd1b8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 51,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "07282df5-3023-48de-af88-b6bedbeea737",
          "title": "Patch Reqres API",
          "fullFile": "C:\\Users\\LENOVO\\Documents\\QA Engineer\\Sesi6_Andrean Martasyah\\API-Automation\\tests\\patchUser.js",
          "file": "\\tests\\patchUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should update user data successfully",
              "fullTitle": "Patch Reqres API Should update user data successfully",
              "timedOut": false,
              "duration": 230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await fetch(\"https://reqres.in/api/users/2\", {\n  method: \"PATCH\",\n  headers: {\n    \"x-api-key\": \"reqres-free-v1\",\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    name: \"Shinta\",\n    job: \"Senior Engineer\"\n  }),\n});\nconst data = await response.json();\n\n// Check if the response status is 200 OK\nexpect(response.status).to.equal(200);\nexpect(data.name).to.equal(\"Shinta\");\nexpect(data.job).to.equal(\"Senior Engineer\");",
              "err": {},
              "uuid": "4f81a4cf-7e73-4296-ba46-1c361a90df53",
              "parentUUID": "07282df5-3023-48de-af88-b6bedbeea737",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4f81a4cf-7e73-4296-ba46-1c361a90df53"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 230,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "12c36faa-bae1-4694-9c9a-b4440b2354c3",
          "title": "Post Reqres API",
          "fullFile": "C:\\Users\\LENOVO\\Documents\\QA Engineer\\Sesi6_Andrean Martasyah\\API-Automation\\tests\\postUser.js",
          "file": "\\tests\\postUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should create a new user successfully",
              "fullTitle": "Post Reqres API Should create a new user successfully",
              "timedOut": false,
              "duration": 234,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await fetch(\"https://reqres.in/api/users\", {\n  method: \"POST\",\n  headers: {\n    \"x-api-key\": \"reqres-free-v1\",\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    name: \"Shinta\",\n    job: \"Software Engineer\"\n  }),\n});\nconst data = await response.json();\n\n// Check if the response status is 201 Created\nexpect(response.status).to.equal(201);\nexpect(data.name).to.equal(\"Shinta\");",
              "err": {},
              "uuid": "76f50f9e-8fda-4f80-9fb8-a8fa83c28c87",
              "parentUUID": "12c36faa-bae1-4694-9c9a-b4440b2354c3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "76f50f9e-8fda-4f80-9fb8-a8fa83c28c87"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 234,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0dec749f-0e99-49af-ae90-f9d9dfed4245",
          "title": "Validasi JSON Schema",
          "fullFile": "C:\\Users\\LENOVO\\Documents\\QA Engineer\\Sesi6_Andrean Martasyah\\API-Automation\\tests\\schemaValidation.test.js",
          "file": "\\tests\\schemaValidation.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should validate response against defined schema",
              "fullTitle": "Validasi JSON Schema should validate response against defined schema",
              "timedOut": false,
              "duration": 39,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Simulasi response API (data yang ingin divalidasi)\nconst responseData = {\n  name: \"Gajah Lucu\",\n  age: 60,\n  isActive: true,\n};\n// Skema JSON yang digunakan untuk validasi\nconst schema = {\n  type: \"object\",\n  properties: {\n    name: { type: \"string\" },\n    age: { type: \"number\" },\n    isActive: { type: \"boolean\" },\n  },\n  required: [\"name\", \"age\", \"isActive\"],\n  additionalProperties: false // opsional: tolak field yang tidak dikenali\n};\n// Kompilasi schema dan validasi data\nconst validate = ajv.compile(schema);\nconst isValid = validate(responseData);\n// Jika tidak valid, cetak pesan error ke konsol\nif (!isValid) {\n  console.error(\"Schema validation errors:\", validate.errors);\n}\n// Assertion agar test gagal jika schema tidak valid\nexpect(isValid, JSON.stringify(validate.errors, null, 2)).to.be.true;",
              "err": {},
              "uuid": "5eea26e2-3a35-41fb-86ca-c6ee8a7dc60f",
              "parentUUID": "0dec749f-0e99-49af-ae90-f9d9dfed4245",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5eea26e2-3a35-41fb-86ca-c6ee8a7dc60f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 39,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}